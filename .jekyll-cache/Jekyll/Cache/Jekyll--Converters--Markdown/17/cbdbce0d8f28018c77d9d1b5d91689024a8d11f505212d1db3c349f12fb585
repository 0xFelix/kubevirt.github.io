I"š><p>Building your environment for testing or automation purposes can be difficult when using different technologies. In this guide, youâ€™ll find how to set up your system step-by-step to work with the latest versions of Kubernetes (up to today), CRI-O and KubeVirt.</p>

<p>In this series of blogposts the following topics are going to be covered en each post:</p>

<ul>
  <li><a href="/2019/KubeVirt_k8s_crio_from_scratch.html">Requirements: dependencies and containers runtime</a></li>
  <li><a href="/2019/KubeVirt_k8s_crio_from_scratch_installing_kubernetes.html">Kubernetes: Cluster and Network</a></li>
  <li><a href="/2019/KubeVirt_k8s_crio_from_scratch_installing_KubeVirt.html">KubeVirt: requirements and first Virtual Machine</a></li>
</ul>

<p>In the first blogpost of the series (<a href="/2019/KubeVirt_k8s_crio_from_scratch.html">KubeVirt on Kubernetes with CRI-O from scratch)</a> the initial set up for a CRI-O runtime environment has been covered.</p>

<p>In the second blogpost of the series (<a href="/2019/KubeVirt_k8s_crio_from_scratch_installing_kubernetes.html">Kubernetes: Cluster and Network</a>) the Kubernetes cluster and network were set up based on the CRI-O installation already prepared in the first post.</p>

<p>This is the last blogpost of the series of 3, in this case KubeVirt is going to be installed and also would be used to deploy an example Virtual Machine.</p>

<h2 id="installing-kubevirt">Installing KubeVirt</h2>

<p>What is KubeVirt? if you navigate to the <a href="https://kubevirt.io">KubeVirt webpage</a> you can read:</p>

<blockquote>
  <p>KubeVirt technology addresses the needs of development teams that have adopted or want to adopt Kubernetes but possess existing Virtual Machine-based workloads that cannot be easily containerized. More specifically, the technology provides a unified development platform where developers can build, modify, and deploy applications residing in both Application Containers as well as Virtual Machines in a common, shared environment.</p>
</blockquote>

<blockquote>
  <p>Benefits are broad and significant. Teams with a reliance on existing virtual machine-based workloads are empowered to rapidly containerize applications. With virtualized workloads placed directly in development workflows, teams can decompose them over time while still leveraging remaining virtualized components as is comfortably desired.</p>
</blockquote>

<p>In this example there is a Kubernetes cluster compose of one master, for it to be schedulable to host the KubeVirt pods, a little modification has to be done:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl taint nodes k8s-test node-role.kubernetes.io/master:NoSchedule-
</code></pre></div></div>

<p>The last version of KubeVirt at the moment is <code class="highlighter-rouge">v0.20.8</code>, to check it the following command can be executed:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# <span class="nb">export </span><span class="nv">KUBEVIRT_VERSION</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> https://api.github.com/repos/kubevirt/kubevirt/releases/latest | jq <span class="nt">-r</span> .tag_name<span class="si">)</span>

k8s-test.local# <span class="nb">echo</span> <span class="nv">$KUBEVIRT_VERSION</span>
v0.20.8
</code></pre></div></div>

<p>To install KubeVirt, the operator and the cr are going to be created with the following commands:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl create <span class="nt">-f</span> https://github.com/kubevirt/kubevirt/releases/download/<span class="k">${</span><span class="nv">KUBEVIRT_VERSION</span><span class="k">}</span>/kubevirt-operator.yaml

k8s-test.local# kubectl create <span class="nt">-f</span> https://github.com/kubevirt/kubevirt/releases/download/<span class="k">${</span><span class="nv">KUBEVIRT_VERSION</span><span class="k">}</span>/kubevirt-cr.yaml
</code></pre></div></div>

<p>This demo environment already runs within a virtualized environment, and in order to be able to run VMs here we need to pre-configure KubeVirt so it uses software-emulated virtualization instead of trying to use real hardware virtualization.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl create configmap kubevirt-config <span class="nt">-n</span> kubevirt <span class="nt">--from-literal</span> debug.useEmulation<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>

<p>The deployment can be checked with the following command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl get pods <span class="nt">-n</span> kubevirt
NAME                               READY   STATUS    RESTARTS   AGE
virt-api-5546d58cc8-5sm4v          1/1     Running   0          16h
virt-api-5546d58cc8-pxkgt          1/1     Running   0          16h
virt-controller-5c749d77bf-cxxj8   1/1     Running   0          16h
virt-controller-5c749d77bf-wwkxm   1/1     Running   0          16h
virt-handler-cx7q7                 1/1     Running   0          16h
virt-operator-6b4dccb44d-bqxld     1/1     Running   0          16h
virt-operator-6b4dccb44d-m2mvf     1/1     Running   0          16h
</code></pre></div></div>

<p>Now that KubeVirt is installed is the right time to download the client tool to interact with th Virtual Machines.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# wget <span class="nt">-O</span> virtctl https://github.com/kubevirt/kubevirt/releases/download/<span class="k">${</span><span class="nv">KUBEVIRT_VERSION</span><span class="k">}</span>/virtctl-<span class="k">${</span><span class="nv">KUBEVIRT_VERSION</span><span class="k">}</span><span class="nt">-linux-amd64</span>

k8s-test.local# <span class="nb">chmod</span> +x virtctl

k8s-test.local# ./virtctl
Available Commands:
  console      Connect to a console of a virtual machine instance.
  expose       Expose a virtual machine instance, virtual machine, or virtual machine instance replica <span class="nb">set </span>as a new service.
  <span class="nb">help         </span>Help about any <span class="nb">command
  </span>image-upload Upload a VM image to a PersistentVolumeClaim.
  restart      Restart a virtual machine.
  start        Start a virtual machine.
  stop         Stop a virtual machine.
  version      Print the client and server version information.
  vnc          Open a vnc connection to a virtual machine instance.

Use <span class="s2">"virtctl &lt;command&gt; --help"</span> <span class="k">for </span>more information about a given command.
Use <span class="s2">"virtctl options"</span> <span class="k">for </span>a list of global command-line options <span class="o">(</span>applies to all commands<span class="o">)</span><span class="nb">.</span>
</code></pre></div></div>

<p>This step is optional, right now anything related with the Virtual Machines can be done running the <code class="highlighter-rouge">virtctl</code> command. In case thereâ€™s a need to interact with the Virtual Machines without leaving the scope of the <code class="highlighter-rouge">kubectl</code> command, the virt plugin for Krew can be installed following the instructions below:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# <span class="o">(</span>
  <span class="nb">set</span> <span class="nt">-x</span><span class="p">;</span> <span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">-d</span><span class="si">)</span><span class="s2">"</span> <span class="o">&amp;&amp;</span>
  curl <span class="nt">-fsSLO</span> <span class="s2">"https://github.com/kubernetes-sigs/krew/releases/download/v0.3.1/krew.{tar.gz,yaml}"</span> <span class="o">&amp;&amp;</span>
  <span class="nb">tar </span>zxvf krew.tar.gz <span class="o">&amp;&amp;</span>
  ./krew-<span class="s2">"</span><span class="si">$(</span><span class="nb">uname</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">_amd64"</span> <span class="nb">install</span> <span class="se">\</span>
    <span class="nt">--manifest</span><span class="o">=</span>krew.yaml <span class="nt">--archive</span><span class="o">=</span>krew.tar.gz
<span class="o">)</span>
...
Installed plugin: krew
WARNING: You installed a plugin from the krew-index plugin repository.
   These plugins are not audited <span class="k">for </span>security by the Krew maintainers.
   Run them at your own risk.
</code></pre></div></div>

<p>The warning printed by the Krew maintainers can be ignored.
To have the krew plugin available, the PATH variable has to be modified:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# vim ~/.bashrc
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">KREW_ROOT</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.krew</span><span class="k">}</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
k8s-test.local# <span class="nb">source</span> ~/.bashrc
</code></pre></div></div>

<p>Now, the virt plugin is going to be installed using the krew plugin manager:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl krew <span class="nb">install </span>virt
Updated the <span class="nb">local </span>copy of plugin index.
Installing plugin: virt
CAVEATS:
<span class="se">\</span>
 |  virt plugin is a wrapper <span class="k">for </span>virtctl originating from the KubeVirt project. In order to use virtctl you will
 |  need to have KubeVirt installed on your Kubernetes cluster to use it. See https://kubevirt.io/ <span class="k">for </span>details
 |
 |  Run
 |
 |    kubectl virt <span class="nb">help</span>
 |
 |  to get an overview of the available commands
 |
 |  See
 |
 |    https://kubevirt.io/user-guide/#/usage/graphical-and-console-access?id<span class="o">=</span>graphical-and-serial-console-access
 |
 |  <span class="k">for </span>a usage example
/
Installed plugin: virt
WARNING: You installed a plugin from the krew-index plugin repository.
   These plugins are not audited <span class="k">for </span>security by the Krew maintainers.
   Run them at your own risk.
</code></pre></div></div>

<h2 id="installing-the-first-virtual-machine-in-kubevirt">Installing the first Virtual Machine in KubeVirt</h2>

<p>For this example, a cirros Virtual Machine is going to be created, in this example, the kind of disk used is a registry disk (not persistent):</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/kubevirt/kubevirt.github.io/master/labs/manifests/vm.yaml

k8s-test.local# kubectl get vms
NAME        AGE   RUNNING   VOLUME
testvm   13s   <span class="nb">false</span>
</code></pre></div></div>

<p>After the Virtual Machine has been created, it has to be started, to do so, the virtctl or the kubectl can be used (depending on what method has been chosen in previous steps).</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# ./virtctl start testvm
VM vm-cirros was scheduled to start

k8s-test.local# kubectl get vms
NAME        AGE     RUNNING   VOLUME
testvm   7m11s   <span class="nb">true</span>
</code></pre></div></div>

<p>Next thing to do is to use the <code class="highlighter-rouge">kubectl</code> command for getting the IP address and the actual status of the virtual machines:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# kubectl get vmis
kubectl get vmis
NAME        AGE    PHASE        IP    NODENAME
testvm    14s   Scheduling

k8s-test.local# kubectl get vmis
NAME     AGE   PHASE     IP            NODENAME
testvm   63s   Running   10.244.0.15   k8s-test
</code></pre></div></div>

<p>So, finally the Virtual Machine is running and has an IP address. To connect to that VM, the console can be used (<code class="highlighter-rouge">./virtctl console testvm</code>) or also a direct connection with SSH can be made:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# ssh cirros@10.244.0.15
cirros@10.244.0.15<span class="s1">'s password: gocubsgo
$ uname -a
Linux testvm 4.4.0-28-generic #47-Ubuntu SMP Fri Jun 24 10:09:13 UTC 2016 x86_64 GNU/Linux
$ exit
</span></code></pre></div></div>

<p>To stop the Virtual Machine one of the following commands can be executed:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k8s-test.local# ./virtctl stop testvm
VM testvm was scheduled to stop

k8s-test.local# kubectl virt stop testvm
VM testvm was scheduled to stop
</code></pre></div></div>

<h1 id="troubleshooting">Troubleshooting</h1>

<p>Each step of this guide has a place where to look for possible issues, in general, the <a href="https://kubernetes.io/docs/tasks/debug-application-cluster/debug-cluster/">troubleshooting guide of kubernetes</a> can be checked. The following list tries to ease the possible troubleshooting in case of problems during each step of this guide:</p>

<ul>
  <li>CRI-O: check the status of the CRI-O service <code class="highlighter-rouge">systemctl status crio</code> and also the messages in the journal <code class="highlighter-rouge">journalctl -u crio -lf</code></li>
  <li>Kubernetes: check the status of the Kubelet service <code class="highlighter-rouge">systemctl status kubelet</code> and also the messages in the journal <code class="highlighter-rouge">journalctl -u kubelet -fl</code></li>
  <li>Pods: for checking the status of the pods the kubectl command can be used in different ways
    <ul>
      <li><code class="highlighter-rouge">kubectl get pods -A</code></li>
      <li><code class="highlighter-rouge">kubectl describe pod $pod</code></li>
    </ul>
  </li>
  <li>Nodes: a <code class="highlighter-rouge">Ready</code> status would mean everything is ok with the node, otherwise the details of that node can be checked.
    <ul>
      <li><code class="highlighter-rouge">kubectl get nodes -o wide</code></li>
      <li><code class="highlighter-rouge">kubectl get node &lt;nodename&gt; -o yaml</code></li>
    </ul>
  </li>
  <li>KubeVirt: to check the status of the KubeVirt pods use <code class="highlighter-rouge">kubectl get pods -n kubevirt</code></li>
</ul>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://kubernetes.io/docs/setup/">Kubernetes getting started</a></li>
  <li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">Kubernetes installing kubeadm</a></li>
  <li><a href="https://github.com/cri-o/cri-o/blob/master/tutorials/kubeadm.md#configuring-cni">Running CRI-O with kubeadm</a></li>
  <li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network">Kubernetes pod-network configuration</a></li>
  <li><a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/">Kubectl cheatsheet</a></li>
  <li><a href="https://github.com/intel/multus-cni">Multus</a></li>
  <li><a href="https://kubevirt.io/user-guide/#/">KubeVirt User Guide</a></li>
  <li><a href="https://www.katacoda.com/kubevirt">KubeVirt Katacoda scenarios</a></li>
</ul>
:ET