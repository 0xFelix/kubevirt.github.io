I"Ç(<p>KubeVirt is a great solution for migrating existing workloads towards Kubernetes without having to containerize
everything all at once (or at all).
If some parts of your system can run as pods, while others are perfectly fine as virtual machines, KubeVirt is the
technology that lets you seamlessly run both in a single cluster.</p>

<p>And with the recent release of Ansible 2.8 containing a new set of dedicated modules, itâ€™s now possible to treat KubeVirt
just like any other ansibleâ€“supported VM hosting system. Already an Ansible user? Or maybe still researching your options?
This series of posts should give you a good primer on how combining both technologies can ease your Kubernetes journey.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>While itâ€™s possible to specify the connection and authentication details of your k8s cluster directly in the
playbook, for the purpose of this introduction, weâ€™ll assume you have a working kubeconfig file in your system. If
running <code class="highlighter-rouge">kubectl get nodes</code> correctly returns a list of nodes and youâ€™ve already deployed KubeVirt, then youâ€™re
good to go. If not, hereâ€™s a <a href="/quickstart_minikube/">KubeVirt quickstart (with Minikube)</a>.</p>

<h2 id="basic-vm-management">Basic VM management</h2>

<p>Before we get down to the YAML, please keep in mind that this post contains only the most interesting bits of the playbooks.
To get actually runnable versions of each example, take a look at <a href="https://github.com/kubevirt/ansible-kubevirt-modules/tree/master/examples/blog/part1">this code repository</a>.</p>

<p>Letâ€™s start with creating the most basic VM by utilizing the <em>kubevirt_vm</em> module, like so:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kubevirt_vm</span><span class="pi">:</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">vm1</span>
  <span class="na">state</span><span class="pi">:</span> <span class="s">running</span>
</code></pre></div></div>

<p>And now run it:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[mmazur@klapek blog1]$</span><span class="w"> </span>ansible-playbook 01_vm1_running.yaml
<span class="go">(â€¦)
TASK [Create first vm?] *******************************************************************************************
</span><span class="gp">fatal: [localhost]: FAILED! =&gt;</span><span class="w"> </span><span class="o">{</span><span class="s2">"changed"</span>: <span class="nb">false</span>, <span class="s2">"msg"</span>: <span class="s2">"It's impossible to create an empty VM or change state of a non-existent VM."</span><span class="o">}</span>
<span class="go">
PLAY RECAP ********************************************************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0
</span></code></pre></div></div>

<p>Oops, too basic. Letâ€™s try again, but this time with a small set of parameters specifying cpu, memory and a boot disk.
The latter will be a demo image provided by the KubeVirt project.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kubevirt_vm</span><span class="pi">:</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">vm1</span>
  <span class="na">cpu_cores</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">memory</span><span class="pi">:</span> <span class="s">64Mi</span>
  <span class="na">disks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">containerdisk</span>
      <span class="na">volume</span><span class="pi">:</span>
        <span class="na">containerDisk</span><span class="pi">:</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">kubevirt/cirros-container-disk-demo:latest</span>
      <span class="na">disk</span><span class="pi">:</span>
        <span class="na">bus</span><span class="pi">:</span> <span class="s">virtio</span>
</code></pre></div></div>

<p>And run it:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[mmazur@klapek blog1]$</span><span class="w"> </span>ansible-playbook 02_vm1.yaml
<span class="go">(â€¦)
TASK [Create first vm, for real this time] ************************************************************************
changed: [localhost]

PLAY RECAP ********************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span></code></pre></div></div>

<p>It worked! One thing to note is that by default <em>kubevirt_vm</em> will not start a newlyâ€“created VM. Running <code class="highlighter-rouge">kubectl get vms -n default</code> will confirm as much.</p>

<p>Changing this behavior requires specifying <code class="highlighter-rouge">state: running</code> as one of the moduleâ€™s parameters when creating a new VM. Or we can get <em>vm1</em> to
boot by running the first playbook one more time, since this time the task will be interpreted as attempting to change the <em>state</em> of
an existing VM to <em>running</em>, which is what we want.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[mmazur@klapek blog1]$</span><span class="w"> </span>ansible-playbook 01_vm1_running.yaml
<span class="go">(â€¦)
TASK [Create first vm] ********************************************************************************************
changed: [localhost]

PLAY RECAP ********************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span></code></pre></div></div>

<p>While the first two runs likely finished almost immediately, this time around <code class="highlighter-rouge">ansible-playbook</code> is waiting for the VM to boot, so
donâ€™t be alarmed if that takes a bit of time.</p>

<p>If everything went correctly, you should have an actual virtual machine running inside your k8s cluster. If present, the <code class="highlighter-rouge">virtctl</code> tool
can be used to log onto the new VM and to take a look around. Run <code class="highlighter-rouge">virtctl console vm1 -n default</code> and press <em>ENTER</em> to get a login prompt.</p>

<p>Itâ€™s useful to note at this point something about how Ansible and Kubernetes operate. This is best illustrated with an example. Letâ€™s run
the first playbook one more time:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[mmazur@klapek blog1]$</span><span class="w"> </span>ansible-playbook 01_vm1_running.yaml
<span class="go">(â€¦)
TASK [Create first vm?] *******************************************************************************************
ok: [localhost]

PLAY RECAP ********************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span></code></pre></div></div>

<p>The output is almost the same as on the previous run, with the one difference being that this time no changes were reported (<code class="highlighter-rouge">changed=0</code>).</p>

<p>This is a concept called idempotency and is present in both Kubernetes and Ansible (though not everywhere).</p>

<p>In this context it means that if the state you want to achieve with your playbook (have the VM running) is the state that the cluster
currently is in (the VM is already running) then nothing will change, no matter how many times you attempt the operation.</p>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>Kubernetes versions prior to 1.12 contain a bug that might report operations that didnâ€™t really do anything as having changed things. If your second (and third, etc.) run of <code class="highlighter-rouge">01_vm1_running.yaml</code> keep reporting <code class="highlighter-rouge">changed=1</code>, this might be the reason why.</p>


</div></div>
<p>Letâ€™s finish with cleaning up after ourselves by removing <em>vm1</em>. First the relevant YAML:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kubevirt_vm</span><span class="pi">:</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">vm1</span>
  <span class="na">state</span><span class="pi">:</span> <span class="s">absent</span>
</code></pre></div></div>

<p>And run it:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">[mmazur@klapek blog1]$</span><span class="w"> </span>ansible-playbook 03_vm1_absent.yaml
<span class="go">(â€¦)
TASK [Delete the vm] **********************************************************************************************
changed: [localhost]

PLAY RECAP ********************************************************************************************************
localhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</span></code></pre></div></div>

<p>Now the VM is gone, which running <code class="highlighter-rouge">kubectl get vms -n default</code> will confirm.
Just like before, if you run the playbook a few more times, the <em>play recap</em> will keep reporting <code class="highlighter-rouge">changed=0</code>.</p>

<h2 id="next">Next</h2>

<p>Please read <a href="/2019/kubevirt-with-ansible-part-2.html">part two</a> for a wider overview of available features.</p>

:ET