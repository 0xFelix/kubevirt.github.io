I"}<h2 id="introduction">Introduction</h2>

<p>Ignition is a new provisioning utility designed specifically for CoreOS/RhCOS. At the most basic level, it is a tool for manipulating a node during early boot. This includes:</p>

<ul>
  <li>Partitioning disks.</li>
  <li>Formatting partitions.</li>
  <li>Writing files (regular files, systemd units, networkd units).</li>
  <li>Configuring users and their associated ssh public keys.</li>
</ul>

<p>Recently, we added support for it in KubeVirt so ignition data can now be embedded in a vm specification, through a dedicated annotation.
Ignition support is still needed in the guest operating system.</p>

<h2 id="enabling-ignition-support">Enabling Ignition Support</h2>

<p>Ignition Support has to be enabled through a <em>feature gate</em>. This is achieved by creating (or editing ) the <em>kubevirt-config</em> ConfigMap in the kubevirt namespace.</p>

<p>A minimal config map would look like this:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">kubevirt-config</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kubevirt</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="s">kubevirt.io</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">feature-gates</span><span class="pi">:</span> <span class="s">ExperimentalIgnitionSupport</span>
</code></pre></div></div>

<p>Make sure to delete kubevirt related pods afterward for the configuration to be taken into account:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl delete pod <span class="nt">--all</span> <span class="nt">-n</span> kubevirt
</code></pre></div></div>

<h2 id="workthrough">WorkThrough</h2>

<p>We assume that you already have a Kubernetes or OpenShift cluster running with KubeVirt installed.</p>

<h3 id="step-1">Step 1</h3>

<p>Create The following VM spec in the file <em>myvm1.yml</em>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">kubevirt.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualMachine</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">myvm1</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">running</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="s">kubevirt.io/size</span><span class="pi">:</span> <span class="s">small</span>
      <span class="na">annotations</span><span class="pi">:</span>
        <span class="s">kubevirt.io/ignitiondata</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">{</span>
              <span class="s">"ignition": {</span>
                  <span class="s">"config": {},</span>
                  <span class="s">"version": "2.2.0"</span>
              <span class="s">},</span>
              <span class="s">"networkd": {},</span>
              <span class="s">"passwd": {</span>
                  <span class="s">"users": [</span>
                      <span class="s">{</span>
                          <span class="s">"name": "core",</span>
                          <span class="s">"sshAuthorizedKeys": [</span>
                              <span class="s">"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/AvM9VbO2yiIb9AillBp/kTr8jqIErRU1LFKqhwPTm4AtVIjFSaOuM4AlspfCUIz9IHBrDcZmbcYKai3lC3JtQic7M/a1OWUjWE1ML8CEvNsGPGu5yNVUQoWC0lmW5rzX9c6HvH8AcmfMmdyQ7SgcAnk0zir9jw8ed2TRAzHn3vXFd7+saZLihFJhXG4zB8vh7gJHjLfjIa3JHptWzW9AtqF9QsoBY/iu58Rf/hRnrfWscyN3x9pGCSEqdLSDv7HFuH2EabnvNFFQZr4J1FYzH/fKVY3Ppt3rf64UWCztDu7L44fPwwkI7nAzdmQVTaMoD3Ej8i7/OSFZsC2V5IBT kboumedh@bumblefoot"</span>
                          <span class="s">]</span>
                      <span class="s">},</span>
                  <span class="s">]</span>
              <span class="s">}</span>
          <span class="s">}</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">domain</span><span class="pi">:</span>
        <span class="na">devices</span><span class="pi">:</span>
          <span class="na">disks</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">containerdisk</span>
              <span class="na">disk</span><span class="pi">:</span>
                <span class="na">bus</span><span class="pi">:</span> <span class="s">virtio</span>
          <span class="na">interfaces</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
              <span class="na">bridge</span><span class="pi">:</span> <span class="pi">{}</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s">64M</span>
      <span class="na">networks</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">default</span>
          <span class="na">pod</span><span class="pi">:</span> <span class="pi">{}</span>
      <span class="na">volumes</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">containerdisk</span>
          <span class="na">containerDisk</span><span class="pi">:</span>
            <span class="na">image</span><span class="pi">:</span> <span class="s">kubevirt/fedora-cloud-container-disk-demo</span>
</code></pre></div></div>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>We simply inject the ignition data as a string in <em>vm/spec/domain/spec/metadata/annotations</em>, using <em>kubevirt.io/ignitiondata</em> as an annotation</p>


</div></div>
<h3 id="step-2">Step 2</h3>

<p>Create the VM:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl apply <span class="nt">-f</span> myvm1.yml
virtualmachine <span class="s2">"myvm1"</span> created
</code></pre></div></div>

<p>At this point, when VM boots, ignition data will be injected.</p>

<h2 id="how-does-it-work-under-the-hood">How does it work under the hood?</h2>

<p>We currently leverage <a href="https://libvirt.org/drvqemu.html#qemucommand">Pass-through of arbitrary qemu commands</a> although there is some discussion around using a metadata server instead</p>

<h2 id="summary">Summary</h2>

<p>Ignition Support brings the ability to run CoreOS/RHCOS distros on KubeVirt and to customize them at boot time.</p>
:ET