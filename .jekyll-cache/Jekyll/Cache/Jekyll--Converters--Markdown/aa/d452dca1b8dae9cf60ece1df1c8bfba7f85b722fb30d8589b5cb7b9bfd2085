I"b<h2 id="introduction">Introduction</h2>

<p><a href="https://jenkins.io/">Jenkins</a> is an open-source automation server that allows to define jobs, triggers, etc to validate that certain conditions are met.</p>

<p>Jobs can run either after a trigger has been received (for example from a repo merge or PR), periodically to validate that a previous â€˜validatedâ€™ job is still â€˜validâ€™ or even manually to force refresh of information.</p>

<h2 id="community-repositories">Community repositories</h2>

<p>Outside of the main KubeVirt binaries, there are other repos that are involved in the project ecosystem have tests to validate the information provided on them.</p>

<p>The community repositories include:</p>

<ul>
  <li><a href="https://github.com/kubevirt/kubevirt.github.io">KubeVirt website</a></li>
  <li><a href="https://github.com/kubevirt/kubevirt-tutorial">KubeVirt tutorial</a></li>
  <li><a href="https://github.com/metal3-io/metal3-io.github.io">Katacoda Scenarios</a></li>
  <li><a href="https://github.com/kubevirt/community">Community repo</a></li>
  <li><a href="https://github.com/kubevirt/cloud-image-builder">Cloud Image Builder</a></li>
</ul>

<p>Those repos contain useful information for new users, like the <code class="highlighter-rouge">try-it</code> scenarios, the Laboratories, <a href="https://katacoda.com/kubevirt">Katacoda scenarios</a>, Community supporting files (like logos, proposals, etc).</p>

<h2 id="the-jobs">The jobs</h2>

<p>Our Jenkins instance is hosted at CentOS OpenShift instance and itâ€™s available at <a href="https://jenkins-kubevirt.apps.ci.centos.org/">https://jenkins-kubevirt.apps.ci.centos.org/</a></p>

<p>There, weâ€™ve two jobs weâ€™re currently refining to get better results:</p>

<ul>
  <li><a href="https://jenkins-kubevirt.apps.ci.centos.org/job/cloud-image-builder/">Cloud Image Builder</a>, which builds, according to the repo defined above contents what the AWS, GCP and Minikube images contain (binaries, KubeVirt version, Minikube version).
    <ul>
      <li>The <a href="https://jenkins-kubevirt.apps.ci.centos.org/job/cloud-image-builder/job/master/lastSuccessfulBuild/artifact/new-images.json">resulting AWS images</a> are copied to each region.</li>
      <li>The resulting GCP images are also copied</li>
      <li>The resulting Minikube image is used for lab validation</li>
    </ul>
  </li>
  <li><a href="https://jenkins-kubevirt.apps.ci.centos.org/job/Lab%20Validation/">Lab Validation</a> which uses above created images with the contents of the <code class="highlighter-rouge">/tests</code> folder at <a href="https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests">Kubevirt.github.io repository</a> to spin up instances and validate that the contents of the labs are valid</li>
</ul>

<p>Both tests can be executed periodically (by default each day), causing a repository rescan to detect new changes and later validation of them and only on branch <code class="highlighter-rouge">master</code>.</p>

<p>If youâ€™re curious about what Jenkins does, check the file <code class="highlighter-rouge">JenkinsFile</code> at the root of each repository:</p>

<ul>
  <li><a href="https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/Jenkinsfile">https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/Jenkinsfile</a></li>
  <li><a href="https://github.com/kubevirt/cloud-image-builder/blob/master/Jenkinsfile">https://github.com/kubevirt/cloud-image-builder/blob/master/Jenkinsfile</a></li>
</ul>

<p>Both of them define pipelines so that runs can be executed in parallel for each one of the environments: GCP, AWS, Minikube.</p>

<h2 id="cloud-image-builder">Cloud Image Builder</h2>

<p>Cloud Image Builder has primarily two steps:</p>

<ul>
  <li><a href="https://github.com/kubevirt/cloud-image-builder/blob/master/shell/build.sh">build</a></li>
  <li><a href="https://github.com/kubevirt/cloud-image-builder/blob/master/shell/publish.sh">publish</a></li>
</ul>

<p>Build takes most of the logic, as it prepares <code class="highlighter-rouge">virtctl</code> and <code class="highlighter-rouge">kubectl</code> binaries and then for each one of the environments it executes the required ansible playbooks:</p>

<ul>
  <li><code class="highlighter-rouge">${environment}-provision.yml</code>: Which creates the VM instance on the provider (for Minikube, itâ€™s a VM inside GCP)</li>
  <li><code class="highlighter-rouge">${environment}-setup.yml</code>: Which configures the VM instance (repositories, packages, first-boot script, KubeVirt installation, virtctl binaries, etc)</li>
  <li><code class="highlighter-rouge">${environment}-mkimage.yml</code>: Which creates an image out of the instance generated by steps above</li>
  <li><code class="highlighter-rouge">${environment}-publish.yml</code>: Which, for GCP and AWS, publishes the generated image in above step</li>
</ul>

<p>Once the images have been published, the jobs end and instances are removed from the providers.</p>

<h2 id="lab-validation">Lab Validation</h2>

<p>Lab Validation is meant to check that the labs described in the website are working on the three platforms (GCE, AWS, Minikube).</p>

<p>In opposition to <a href="/2019/prow-jobs-for-kubevirt.html">KubeVirt Tutorial</a>, it doesnâ€™t use <code class="highlighter-rouge">mdsh</code> yet for extracting the actual commands out of the lab text and uses ansible playbooks to imitate the lab execution:</p>

<ul>
  <li><a href="https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests/ansible/lab1.yml">https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests/ansible/lab1.yml</a></li>
  <li><a href="https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests/ansible/lab2.yml">https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests/ansible/lab2.yml</a></li>
</ul>

<p>In addition, it contains files for also setting up the instance for running the tests (<code class="highlighter-rouge">${environment}-provision.yml</code>) and doing the later cleanup (<code class="highlighter-rouge">$environment-cleanup.yml</code>).</p>

<p>The first playbook, does create a new instance on the environment being checked using the images created by the Cloud Image Builder, so this means that not only the labs are validated, but also the images generated are validated to detect possible defects like missing binaries, wrongly installed software, etc.</p>

<p>The biggest part on the lab validation is with the <a href="https://github.com/kubevirt/kubevirt.github.io/blob/abd315b2bcdabd2effa71fd3e6af1207d8fcbf42/tests/shell/lab.sh">lab.sh</a> script, which accepts the lab being executed and the environment as parameters, and takes care of provisioning the instance, run the lab and perform cleanup afterwards.</p>
:ET