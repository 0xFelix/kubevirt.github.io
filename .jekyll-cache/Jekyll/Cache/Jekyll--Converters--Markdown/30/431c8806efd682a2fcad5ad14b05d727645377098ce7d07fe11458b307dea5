I"^_<h1 id="hco-known-as-hyper-converged-operator"><a href="https://github.com/kubevirt/hyperconverged-cluster-operator">HCO known as Hyper Converged Operator</a></h1>

<p><strong>Prerequisites:</strong></p>

<p>This Blog assumes that the reader is aware of the concept of Operators and how it works in K8’s environment. Before proceeding further, feel free to take a look at this concept using <a href="https://coreos.com/blog/introducing-operators.html">CoreOS BlogPost</a></p>

<h2 id="what-it-does">What it does?</h2>

<p>The goal of the hyperconverged-cluster-operator (HCO) is to provide a single entrypoint for multiple operators - <a href="https://blog.openshift.com/a-first-look-at-kubevirt/">kubevirt</a>, <a href="http://kubevirt.io/2018/CDI-DataVolumes.html">cdi</a>, <a href="https://github.com/kubevirt/cluster-network-addons-operator/blob/master/README.md">networking</a>, etc… - where users can deploy and configure them in a single object. This operator is sometimes referred to as a “meta operator” or an “operator for operators”. Most importantly, this operator doesn’t replace or interfere with OLM. It only creates operator CRs, which is the user’s prerogative.</p>

<h2 id="how-does-it-work">How does it work?</h2>

<p>In this blog post, I’d like to focus on the first method(i.e by deploying a HCO using a CustomResourceDefinition method)which might seem like the most immediate benefit of this feature. Let’s get started!</p>

<h3 id="environment-description">Environment description</h3>

<p>We can use HCO both on <code class="highlighter-rouge">minikube</code> and also on <code class="highlighter-rouge">OpenShift 4</code>. We will be using OpenShift 4 for HCO in this post.</p>

<p><strong>Note</strong>: All the commands for installing HCO on minikube will remain the same as documented below, please follow the link <a href="/quickstart_minikube/">Install_HCO_minikube</a> install minikube by adjusting the memory to your requirement(atleast 4GiB of RAM is recommended).</p>

<h2 id="deploying-hco-on-openshift-4-cluster">Deploying HCO on OpenShift 4 Cluster.</h2>

<p><a href="https://www.openshift.com/learn/what-is-openshift/">OpenShift</a></p>

<p>Installation steps for OpenShift 4 including video tutorial can be found <a href="https://blog.openshift.com/installing-openshift-4-from-start-to-finish/">here</a></p>

<p>Upon successful installation of OpenShift, we will have a cluster consisting of 3 masters and 3 workers which can be used for HCO integration</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$oc</span> version
Client Version: version.Info<span class="o">{</span>Major:<span class="s2">"4"</span>, Minor:<span class="s2">"1+"</span>, GitVersion:<span class="s2">"v4.1.0"</span>, GitCommit:<span class="s2">"2793c3316"</span>, GitTreeState:<span class="s2">""</span>, BuildDate:<span class="s2">"2019-04-23T07:46:06Z"</span>, GoVersion:<span class="s2">""</span>, Compiler:<span class="s2">""</span>, Platform:<span class="s2">""</span><span class="o">}</span>
Server Version: version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"12+"</span>, GitVersion:<span class="s2">"v1.12.4+0ba401e"</span>, GitCommit:<span class="s2">"0ba401e"</span>, GitTreeState:<span class="s2">"clean"</span>, BuildDate:<span class="s2">"2019-03-31T22:28:12Z"</span>, GoVersion:<span class="s2">"go1.10.8"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>
</code></pre></div></div>

<p>Check the nodes:</p>

<pre><code class="language-sg">$oc get nodes
NAME STATUS ROLES AGE VERSION
ip-10-0-133-213.us-east-2.compute.internal Ready worker 12m v1.13.4+da48e8391
ip-10-0-138-120.us-east-2.compute.internal Ready master 18m v1.13.4+da48e8391
ip-10-0-146-51.us-east-2.compute.internal Ready master 18m v1.13.4+da48e8391
ip-10-0-150-215.us-east-2.compute.internal Ready worker 12m v1.13.4+da48e8391
ip-10-0-160-201.us-east-2.compute.internal Ready master 17m v1.13.4+da48e8391
ip-10-0-168-28.us-east-2.compute.internal Ready worker 12m v1.13.4+da48e8391
</code></pre>

<p>Clone the <a href="https://github.com/kubevirt/hyperconverged-cluster-operator.git">HCO repo</a>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/kubevirt/hyperconverged-cluster-operator.git
</code></pre></div></div>

<p>This gives all the necessary go packages and yaml manifests for the next steps.</p>

<p>Let’s create a NameSpace for the HCO deployment</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oc create new-project kubevirt-hyperconverged
</code></pre></div></div>

<p>Now switch to the kubevirt-hyperconverged NameSpace</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oc project kubevirt-hyperconverged
</code></pre></div></div>

<p>Now launch all the CRD’s</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oc create <span class="nt">-f</span> deploy/converged/crds/hco.crd.yaml
oc create <span class="nt">-f</span> deploy/converged/crds/kubevirt.crd.yaml
oc create <span class="nt">-f</span> deploy/converged/crds/cdi.crd.yaml
oc create <span class="nt">-f</span> deploy/converged/crds/cna.crd.yaml
</code></pre></div></div>

<p>Let’s see the yaml file for HCO Custom Resource Definition</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apiextensions.k8s.io/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">CustomResourceDefinition</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hyperconvergeds.hco.kubevirt.io</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">additionalPrinterColumns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">JSONPath</span><span class="pi">:</span> <span class="s">.metadata.creationTimestamp</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">Age</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">date</span>
    <span class="pi">-</span> <span class="na">JSONPath</span><span class="pi">:</span> <span class="s">.status.phase</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">Phase</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
  <span class="na">group</span><span class="pi">:</span> <span class="s">hco.kubevirt.io</span>
  <span class="na">names</span><span class="pi">:</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">HyperConverged</span>
    <span class="na">plural</span><span class="pi">:</span> <span class="s">hyperconvergeds</span>
    <span class="na">shortNames</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">hco</span>
      <span class="pi">-</span> <span class="s">hcos</span>
    <span class="na">singular</span><span class="pi">:</span> <span class="s">hyperconverged</span>
  <span class="na">scope</span><span class="pi">:</span> <span class="s">Namespaced</span>
  <span class="na">subresources</span><span class="pi">:</span>
    <span class="na">status</span><span class="pi">:</span> <span class="pi">{}</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">v1alpha1</span>
  <span class="na">versions</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">v1alpha1</span>
      <span class="na">served</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>Let’s create ClusterRoleBindings, ClusterRole, ServerAccounts and Deployments for the operator</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc create <span class="nt">-f</span> deploy/converged
</code></pre></div></div>

<p>And after verifying all the above resources we can now finally deploy our HCO custom resource</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc create <span class="nt">-f</span> deploy/converged/crds/hco.cr.yaml
</code></pre></div></div>

<p>We can take a look at the YAML definition of the CustomResource of HCO:</p>

<p>Let’s create ClusterRoleBindings, ClusterRole, ServerAccounts and Deployments for the operator</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc create <span class="nt">-f</span> deploy/converged
</code></pre></div></div>

<p>And after verifying all the above resources we can now finally deploy our HCO custom resource</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>oc create <span class="nt">-f</span> deploy/converged/crds/hco.cr.yaml
</code></pre></div></div>

<p>We can take a look at the YAML definition of the CustomResource of HCO:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">hco.kubevirt.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">HyperConverged</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hyperconverged-cluster</span>
</code></pre></div></div>

<p>After successfully executing the above commands,we should be now be having a virt-controller pod, HCO pod, and a network-addon pod functional and can be viewed as below.</p>

<p>Let’s see the deployed pods:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$oc</span> get pods
NAME                                               READY   STATUS    RESTARTS   AGE
cdi-apiserver-769fcc7bdf-rv8zt                     1/1     Running   0          5m2s
cdi-deployment-8b64c5585-g7zfk                     1/1     Running   0          5m2s
cdi-operator-c77447cc7-58ld2                       1/1     Running   0          11m
cdi-uploadproxy-8dcdcbff-rddl6                     1/1     Running   0          5m2s
cluster-network-addons-operator-85cd468ff5-xjgds   1/1     Running   0          11m
hyperconverged-cluster-operator-75dd9c96f9-pqvdk   1/1     Running   0          11m
virt-api-7f5bfb4c58-bkbhq                          1/1     Running   0          4m59s
virt-api-7f5bfb4c58-kkvwc                          1/1     Running   1          4m59s
virt-controller-6ccbfb7d5b-m7ljf                   1/1     Running   0          3m49s
virt-controller-6ccbfb7d5b-mbvlv                   1/1     Running   0          3m49s
virt-handler-hqz9d                                 1/1     Running   0          3m49s
virt-operator-667b6c845d-jfnsr                     1/1     Running   0          11m
</code></pre></div></div>

<p>Also the below deployments:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$oc</span> get deployments
NAME                              READY   UP-TO-DATE   AVAILABLE   AGE
cdi-apiserver                     1/1     1            1           10m
cdi-deployment                    1/1     1            1           10m
cdi-operator                      1/1     1            1           16m
cdi-uploadproxy                   1/1     1            1           10m
cluster-network-addons-operator   1/1     1            1           16m
hyperconverged-cluster-operator   1/1     1            1           16m
virt-api                          2/2     2            2           9m58s
virt-controller                   2/2     2            2           8m49s
virt-operator                     1/1     1            1           16m
</code></pre></div></div>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>Here, Once we applied the Custom Resource the operator took care of deploying the actual KubeVirt pods (virt-api, virt-controller and virt-handler), CDI pods(cdi-upload-proxy, cdi-apiserver, cdi-deployment, cdi-operator) and Network add-on pods ( cluster-network-addons-operator).We will need to wait until all of the resources are up and running. This can be done using the command above or by using the command above with the <code class="highlighter-rouge">-w</code>flag.</p>


</div></div>
<p>After the HCO is up and running on the cluster, we should be able to see the info of CRD’s</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$oc get crds | grep kubevirt
cdiconfigs.cdi.kubevirt.io                                       2019-05-07T20:22:17Z
cdis.cdi.kubevirt.io                                             2019-05-07T20:20:58Z
datavolumes.cdi.kubevirt.io                                      2019-05-07T20:22:17Z
hyperconvergeds.hco.kubevirt.io                                  2019-05-07T20:20:58Z
kubevirtcommontemplatesbundles.kubevirt.io                       2019-05-07T20:20:58Z
kubevirtnodelabellerbundles.kubevirt.io                          2019-05-07T20:20:58Z
kubevirts.kubevirt.io                                            2019-05-07T20:20:58Z
kubevirttemplatevalidators.kubevirt.io                           2019-05-07T20:20:58Z
kwebuis.kubevirt.io                                              2019-05-07T20:20:58Z
networkaddonsconfigs.networkaddonsoperator.network.kubevirt.io   2019-05-07T20:20:58Z
nodemaintenances.kubevirt.io                                     2019-05-07T20:20:58Z
virtualmachineinstancemigrations.kubevirt.io                     2019-05-07T20:23:02Z
virtualmachineinstancepresets.kubevirt.io                        2019-05-07T20:23:01Z
virtualmachineinstancereplicasets.kubevirt.io                    2019-05-07T20:23:02Z
virtualmachineinstances.kubevirt.io                              2019-05-07T20:23:01Z
virtualmachines.kubevirt.io                                      2019-05-07T20:23:02Z
</code></pre></div></div>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>In OpenShift we can use both <code class="highlighter-rouge">kubectl</code> and <code class="highlighter-rouge">oc</code> interchangeably to interact with the cluster objects once HCO is up and running.</p>


</div></div>
<h2 id="you-can-also-read-more-about-cdi-cna-ssp-operator-web-ui-and-kubevirt">You can also read more about CDI, CNA, ssp-operator, web-ui and KubeVirt:</h2>

<ul>
  <li><a href="/2018/CDI-DataVolumes.html">CDI</a></li>
  <li><a href="https://github.com/kubevirt/cluster-network-addons-operator/blob/master/README.md">CNA</a></li>
  <li><a href="/quickstart_minikube/">KubeVirt</a></li>
  <li><a href="https://github.com/MarSik/kubevirt-ssp-operator">ssp-operator</a></li>
  <li><a href="https://github.com/kubevirt/web-ui">kubevirt-web-ui</a></li>
  <li><a href="https://github.com/kubevirt/node-maintenance-operator">NodeMaintenance</a></li>
</ul>

<h1 id="hco-using-the-olm-method"><a href="https://github.com/operator-framework/operator-lifecycle-manager/blob/954a669200e57c6ce3105ddca17793186b3a3a43/Documentation/design/architecture.md">HCO using the OLM method</a></h1>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>The complete architecture of OLM and its components that connect together can be understood using the link <a href="https://github.com/operator-framework/operator-lifecycle-manager/blob/954a669200e57c6ce3105ddca17793186b3a3a43/Documentation/design/architecture.md">OLM_architecture</a></p>


</div></div>
<p>Replace <docker_org> with your Docker organization as official operator-registry images for HCO will not be provided.</docker_org></p>

<p>Next, build and publish the converged HCO operator-registry image.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>deploy/converged
<span class="nb">export </span><span class="nv">HCO_DOCKER_ORG</span><span class="o">=</span>&lt;docker_org&gt;
docker build <span class="nt">--no-cache</span> <span class="nt">-t</span> docker.io/<span class="nv">$HCO_DOCKER_ORG</span>/hco-registry:example <span class="nt">-f</span> Dockerfile <span class="nb">.</span>
docker push docker.io/<span class="nv">$HCO_DOCKER_ORG</span>/hco-registry:example
</code></pre></div></div>

<p>As an example deployment, Let’s take the value of operator-registry image as</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker.io/rthallisey/hyperconverged-cluster-operator:latest
</code></pre></div></div>

<p>Now, Let’s create the <code class="highlighter-rouge">kubevirt-hyperconverged</code> NS as below</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oc create ns kubevirt-hyperconverged
</code></pre></div></div>

<p>Create the OperatorGroup</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">cat &lt;&lt;EOF | oc create -f -</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">operators.coreos.com/v1alpha2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">OperatorGroup</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hco-operatorgroup</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kubevirt-hyperconverged</span>
<span class="s">EOF</span>
</code></pre></div></div>

<p>Create a Catalog Source backed by a grpc registry</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">cat &lt;&lt;EOF | oc create -f -</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">operators.coreos.com/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">CatalogSource</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">hco-catalogsource</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">openshift-operator-lifecycle-manager</span>
  <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="s">Always</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">sourceType</span><span class="pi">:</span> <span class="s">grpc</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker.io/rthallisey/hco-registry:v0.1-8</span>
  <span class="na">displayName</span><span class="pi">:</span> <span class="s">KubeVirt HyperConverged</span>
  <span class="na">publisher</span><span class="pi">:</span> <span class="s">Red Hat</span>
<span class="s">EOF</span>
</code></pre></div></div>

<p>Please wait until the <code class="highlighter-rouge">hco-catalogsource</code> pod comes up</p>

<p>Next is to create a subscription, we can create a subscription from the OpenShift4 web interface as shown below:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/subscription.png" alt="Subscription" /></p>

<p>Once subscribed, we can create a kubevirt Hyperconverged Operator from UI:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/kubevirt-hyperconverged-31.png" alt="Creating-Subscription" /></p>

<p>Install the HCO Operator:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/kubevirt-operator-57.png" alt="Installed-HCO" /></p>

<p>Please wait until the <code class="highlighter-rouge">virt-operator</code>, <code class="highlighter-rouge">cdi-operator</code> and <code class="highlighter-rouge">cluster-network-addons-operator</code> comes up.</p>

<p>After they are up, its now time to launch the HCO-Custom Resource itself:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/Installed-operator-HCO-48.png" alt="HCO-CR" /></p>

<p>Once the HCO Operator is deployed in the <code class="highlighter-rouge">kubevirt-hyperconverged</code> NS, we can see all the pods are up and running:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/status-pods-54.png" alt="HCO-Managed-Operators" /></p>

<p>We can verify the same from the CLI:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oc get pods <span class="nt">-n</span> kubevirt-hyperconverged
NAME                                               READY   STATUS    RESTARTS   AGE
cdi-apiserver-769fcc7bdf-b5v8n                     1/1     Running   0          4m5s
cdi-deployment-8b64c5585-qs527                     1/1     Running   0          4m4s
cdi-operator-77b8847b96-5kmb2                      1/1     Running   0          4m55s
cdi-uploadproxy-8dcdcbff-xgnxf                     1/1     Running   0          4m5s
cluster-network-addons-operator-584dff99b8-c5kz5   1/1     Running   0          4m55s
hco-operator-59b559bd44-lgdnm                      1/1     Running   0          4m55s
kubevirt-ssp-operator-67b78446f7-l7rfv             1/1     Running   0          4m55s
kubevirt-web-ui-operator-9df6b67d9-mzf6s           1/1     Running   0          4m55s
node-maintenance-operator-6b464dc85-v6vmw          1/1     Running   0          4m55s
virt-api-7b56d7dd89-8s78r                          1/1     Running   0          2m59s
virt-api-7b56d7dd89-h75t8                          1/1     Running   1          2m59s
virt-controller-77c6d6d779-9qpp4                   1/1     Running   0          2m32s
virt-controller-77c6d6d779-vbbxg                   1/1     Running   0          2m32s
virt-handler-4bfb9                                 1/1     Running   0          2m32s
virt-handler-ns97x                                 1/1     Running   0          2m32s
virt-handler-q7wbh                                 1/1     Running   0          2m32s
virt-operator-87d7c98b-mh8pg                       1/1     Running   0          4m55s
virt-operator-87d7c98b-p6mbd                       1/1     Running   0          4m55s
</code></pre></div></div>

<p>We can see how OLM operator manages the HCO pods from the <code class="highlighter-rouge">openshift-operator-lifecycle-manager</code> NS:</p>

<p><img src="../assets/2019-04-17-HyperConvergedOperator/HCO-Managed-Operators.png" alt="HCO-Managed-Operators" /></p>

<p>The above method demonstrates the integration of HCO operator in OpenShift4.</p>

<p>So, after HCO is up and running we need to test it by deploying a small instance of a VM.To deploy an instance follow the instructions here <a href="/quickstart_minikube/#install-virtctl">minikube_quickstart</a>:</p>

<h2 id="conclusion">Conclusion</h2>

<p>What to expect next?</p>

<p>HCO achieved its goal which was to provide a single entrypoint for multiple operators - kubevirt, cdi, networking, etc.where users can deploy and configure them in a single object as seen above.</p>

<p>Now, we can also launch the HCO through OLM.</p>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">Note</p><p>Until we publish (and consume) the HCO and component operators through <a href="https://operatorhub.io/">operatorhub.io</a>, this is a means to demonstrate the HCO workflow without OLM
Once we publish operators through Marketplace at <a href="https://operatorhub.io">OperatorHub.io</a>, it will be available <a href="https://github.com/operator-framework/operator-lifecycle-manager/blob/954a669200e57c6ce3105ddca17793186b3a3a43/Documentation/install/install.md#installing-olm">here</a></p>


</div></div>
:ET