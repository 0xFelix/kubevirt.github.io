I"ÆO<p>Hello! nowadays each operating system vendor has its cloud image available to download ready to import and deploy a new Virtual Machine (VM) inside Kubernetes with KubeVirt,
but what if you want to follow the traditional way of installing a VM using an existing iso attached as a CD-ROM?</p>

<p>In this blogpost, we are going to explain how to prepare that VM with the ISO file and the needed drivers to proceed with the installation of Microsoft Windows.</p>

<h2 id="pre-requisites">Pre-requisites</h2>

<ul>
  <li>A Kubernetes cluster is already up and running</li>
  <li><a href="https://kubevirt.io/user-guide/#/">KubeVirt</a> and <a href="https://github.com/kubevirt/containerized-data-importer/blob/master/README.md">CDI</a> are already installed</li>
  <li>There is enough free CPU, Memory and disk space in the cluster to deploy a Microsoft Windows VM, in this example, the version 2012 R2 VM is going to be used</li>
</ul>

<h2 id="preparation">Preparation</h2>

<p>To proceed with the Installation steps the different elements involved are listed:</p>

<div class="premonition note"><div class="fa fa-check-square"></div><div class="content"><p class="header">NOTE</p><p>No need for executing any command until the <a href="#installation">Installation</a> section.</p>


</div></div>
<ol>
  <li>An empty KubeVirt Virtual Machine
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">kubevirt.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualMachine</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">win2k12-iso</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">running</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="s">kubevirt.io/domain</span><span class="pi">:</span> <span class="s">win2k12-iso</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">domain</span><span class="pi">:</span>
        <span class="na">cpu</span><span class="pi">:</span>
          <span class="na">cores</span><span class="pi">:</span> <span class="m">4</span>
        <span class="na">devices</span><span class="pi">:</span>
    <span class="s">...</span>
        <span class="s">machine</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">q35</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s">8G</span>
      <span class="na">volumes</span><span class="pi">:</span>
    <span class="s">...</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>A PVC with the Microsoft Windows ISO file attached as CD-ROM to the VM, would be automatically created with the <code class="highlighter-rouge">virtctl</code> command when uploading the file</p>

    <p>First thing here is to download the ISO file of the Microsoft Windows, for that the <a href="https://www.Microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2">Microsoft Evaluation Center</a> offers
the ISO files to download for evaluation purposes:</p>

    <p><img src="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/win2k12_download_iso.png" alt="win2k12_download_iso.png" title="KubeVirt Microsoft Windows iso download" /></p>

    <p>To be able to start the evaluation some personal data has to be filled in. Afterwards, the architecture to be checked is ‚Äú64 bit‚Äù and the language selected as shown in
the following picture:</p>

    <p><img src="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/win2k12_download_iso_64.png" alt="win2k12_download_iso_64.png" title="KubeVirt Microsoft Windows iso download" /></p>

    <p>Once the ISO file is downloaded it has to be uploaded with <code class="highlighter-rouge">virtctl</code>, the parameters used in this example are the following:</p>

    <ul>
      <li><code class="highlighter-rouge">image-upload</code>: Upload a VM image to a PersistentVolumeClaim</li>
      <li><code class="highlighter-rouge">--image-path</code>: The path of the ISO file</li>
      <li><code class="highlighter-rouge">--pvc-name</code>: The name of the PVC to store the ISO file, in this example is <code class="highlighter-rouge">iso-win2k12</code></li>
      <li><code class="highlighter-rouge">--access-mode</code>: the access mode for the PVC, in the example <code class="highlighter-rouge">ReadOnlyMany</code> has been used.</li>
      <li><code class="highlighter-rouge">--pvc-size</code>: The size of the PVC, is where the ISO will be stored, in this case, the ISO is 4.3G so a PVC OS 5G should be enough</li>
      <li><code class="highlighter-rouge">--uploadproxy-url</code>: The URL of the cdi-upload proxy service, in the following example, the CLUSTER-IP is <code class="highlighter-rouge">10.96.164.35</code> and the PORT is <code class="highlighter-rouge">443</code></li>
    </ul>
  </li>
</ol>

<div class="premonition info"><div class="fa fa-info-circle"></div><div class="content"><p class="header">Information</p><p>To upload data to the cluster, the cdi-uploadproxy service must be accessible from outside the cluster. In a production environment, this probably involves setting up an Ingress or a LoadBalancer Service.</p>


</div></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nv">$ </span>kubectl get services <span class="nt">-n</span> cdi
   NAME              TYPE        CLUSTER-IP     EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>   AGE
   cdi-api           ClusterIP   10.96.117.29   &lt;none&gt;        443/TCP   6d18h
   cdi-uploadproxy   ClusterIP   10.96.164.35   &lt;none&gt;        443/TCP   6d18h
</code></pre></div></div>

<p>In this example the ISO file was copied to the Kubernetes node, to allow the <code class="highlighter-rouge">virtctl</code> to find it and to simplify the operation.</p>

<ul>
  <li><code class="highlighter-rouge">--insecure</code>: Allow insecure server connections when using HTTPS</li>
  <li><code class="highlighter-rouge">--wait-secs</code>: The time in seconds to wait for upload pod to start. (default 60)</li>
</ul>

<p>The final command with the parameters and the values would look like:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nv">$ </span>virtctl image-upload <span class="se">\</span>
   <span class="nt">--image-path</span><span class="o">=</span>/root/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO <span class="se">\</span>
   <span class="nt">--pvc-name</span><span class="o">=</span>iso-win2k12 <span class="se">\</span>
   <span class="nt">--access-mode</span><span class="o">=</span>ReadOnlyMany <span class="se">\</span>
   <span class="nt">--pvc-size</span><span class="o">=</span>5G <span class="se">\</span>
   <span class="nt">--uploadproxy-url</span><span class="o">=</span>https://10.96.164.35:443 <span class="se">\</span>
   <span class="nt">--insecure</span> <span class="se">\</span>
   <span class="nt">--wait-secs</span><span class="o">=</span>240
</code></pre></div></div>

<ol>
  <li>
    <p>A PVC for the hard drive where the Operating System is going to be installed, in this example it is called <code class="highlighter-rouge">winhd</code> and the space requested is 15Gi:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">winhd</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
<span class="na">resources</span><span class="pi">:</span>
  <span class="na">requests</span><span class="pi">:</span>
    <span class="na">storage</span><span class="pi">:</span> <span class="s">15Gi</span>
<span class="na">storageClassName</span><span class="pi">:</span> <span class="s">hostpath</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>A <a href="https://kubevirt.io/user-guide/#/creation/virtio-win?id=how-to-obtain-virtio-drivers">container with the virtio drivers</a> attached as a CD-ROM to the VM.
The container image has to be pulled to have it available in the local registry.</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker pull kubevirt/virtio-container-disk
</code></pre></div>    </div>

    <p>And also it has to be referenced in the VM YAML, in this example the name for the <code class="highlighter-rouge">containerDisk</code> is <code class="highlighter-rouge">virtiocontainerdisk</code>.</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">disk</span><span class="pi">:</span>
    <span class="na">bus</span><span class="pi">:</span> <span class="s">sata</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">virtiocontainerdisk</span>
<span class="nn">---</span>
<span class="pi">-</span> <span class="na">containerDisk</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">kubevirt/virtio-container-disk</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">virtiocontainerdisk</span>
</code></pre></div>    </div>

    <p>If the pre-requisites are fulfilled, the final YAML (<a href="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/win2k12.yml">win2k12.yml</a>), will look like:</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">winhd</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">15Gi</span>
  <span class="na">storageClassName</span><span class="pi">:</span> <span class="s">hostpath</span>

<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">kubevirt.io/v1alpha3</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VirtualMachine</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">win2k12-iso</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">running</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="s">kubevirt.io/domain</span><span class="pi">:</span> <span class="s">win2k12-iso</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">domain</span><span class="pi">:</span>
        <span class="na">cpu</span><span class="pi">:</span>
          <span class="na">cores</span><span class="pi">:</span> <span class="m">4</span>
        <span class="na">devices</span><span class="pi">:</span>
          <span class="na">disks</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">bootOrder</span><span class="pi">:</span> <span class="m">1</span>
            <span class="na">cdrom</span><span class="pi">:</span>
              <span class="na">bus</span><span class="pi">:</span> <span class="s">sata</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">cdromiso</span>
          <span class="pi">-</span> <span class="na">disk</span><span class="pi">:</span>
              <span class="na">bus</span><span class="pi">:</span> <span class="s">virtio</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">harddrive</span>
          <span class="pi">-</span> <span class="na">cdrom</span><span class="pi">:</span>
              <span class="na">bus</span><span class="pi">:</span> <span class="s">sata</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">virtiocontainerdisk</span>
        <span class="na">machine</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">q35</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s">8G</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">cdromiso</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">iso-win2k12</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">harddrive</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">winhd</span>
      <span class="pi">-</span> <span class="na">containerDisk</span><span class="pi">:</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s">kubevirt/virtio-container-disk</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">virtiocontainerdisk</span>
</code></pre></div>    </div>
  </li>
</ol>

<div class="premonition info"><div class="fa fa-info-circle"></div><div class="content"><p class="header">Information</p><p>Special attention to the <code class="highlighter-rouge">bootOrder: 1</code> parameter in the first disk as it is the volume containing the ISO and it has to be marked as the first device to boot from.</p>


</div></div>
<h2 id="installation">Installation</h2>

<p>To proceed with the installation the commands commented above are going to be executed:</p>

<ol>
  <li>
    <p>Uploading the ISO file to the PVC:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>virtctl image-upload <span class="se">\</span>
<span class="nt">--image-path</span><span class="o">=</span>/root/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO <span class="se">\</span>
<span class="nt">--pvc-name</span><span class="o">=</span>iso-win2k12 <span class="se">\</span>
<span class="nt">--access-mode</span><span class="o">=</span>ReadOnlyMany <span class="se">\</span>
<span class="nt">--pvc-size</span><span class="o">=</span>5G <span class="se">\</span>
<span class="nt">--uploadproxy-url</span><span class="o">=</span>https://10.96.164.35:443 <span class="se">\</span>
<span class="nt">--insecure</span> <span class="se">\</span>
<span class="nt">--wait-secs</span><span class="o">=</span>240

DataVolume default/iso-win2k12 created
Waiting <span class="k">for </span>PVC iso-win2k12 upload pod to be ready...
Pod now ready
Uploading data to https://10.96.164.35:443

4.23 GiB / 4.23 GiB <span class="o">[=======================================================================================================================================================================]</span> 100.00% 1m21s

Uploading /root/9600.17050.WINBLUE_REFRESH.140317-1640_X64FRE_SERVER_EVAL_EN-US-IR3_SSS_X64FREE_EN-US_DV9.ISO completed successfully
</code></pre></div>    </div>
  </li>
  <li>
    <p>Pulling the <code class="highlighter-rouge">virtio</code> container image to the locally:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker pull kubevirt/virtio-container-disk
Using default tag: latest
Trying to pull repository docker.io/kubevirt/virtio-container-disk ...
latest: Pulling from docker.io/kubevirt/virtio-container-disk
Digest: sha256:7e5449cb6a4a9586a3cd79433eeaafd980cb516119c03e499492e1e37965fe82
Status: Image is up to <span class="nb">date </span><span class="k">for </span>docker.io/kubevirt/virtio-container-disk:latest
</code></pre></div>    </div>
  </li>
  <li>
    <p>Creating the PVC and Virtual Machine definitions:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl create <span class="nt">-f</span> win2k12.yml
virtualmachine.kubevirt.io/win2k12-iso configured
persistentvolumeclaim/winhd created
</code></pre></div>    </div>
  </li>
  <li>
    <p>Starting the Virtual Machine Instance:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>virtctl start win2k12-iso
VM win2k12-iso was scheduled to start

<span class="nv">$ </span>kubectl get vmi
NAME          AGE   PHASE     IP            NODENAME
win2k12-iso   82s   Running   10.244.0.53   master-00.kubevirt-io
</code></pre></div>    </div>
  </li>
  <li>
    <p>Once the status of the VMI is <code class="highlighter-rouge">RUNNING</code> it‚Äôs time to connect using VNC:</p>

    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>virtctl vnc win2k12-iso
</code></pre></div>    </div>

    <p><img src="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/windows2k12_install.png" alt="windows2k12_install.png" title="KubeVirt Microsoft Windows installation" /></p>

    <p>Here is important to comment that to be able to connect through VNC using <code class="highlighter-rouge">virtctl</code> it‚Äôs necessary to reach the Kubernetes API.
The following video shows how to go through the Microsoft Windows installation process:</p>

    <figure class="video_container">
<video controls="true" allowfullscreen="true" poster="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/kubevirt_install_windows.mp4" width="800" height="600">
    <source src="/assets/2020-02-14-KubeVirt-installing_Microsoft_Windows_from_an_iso/kubevirt_install_windows.mp4" type="video/mp4" />
</video>
</figure>
  </li>
</ol>

<p>Once the Virtual Machine is created, the PVC with the ISO and the <code class="highlighter-rouge">virtio</code> drivers can be unattached from the Virtual Machine.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://kubevirt.io/user-guide/#/creation/virtio-win">KubeVirt user-guide: Virtio Windows Driver disk usage</a></li>
  <li><a href="https://github.com/kubevirt/containerized-data-importer/blob/master/doc/image-from-registry.md">Creating a registry image with a VM disk</a></li>
  <li><a href="https://github.com/kubevirt/containerized-data-importer/blob/master/doc/upload.md">CDI Upload User Guide</a></li>
  <li><a href="https://kubevirt.io/user-guide/#/creation/virtio-win?id=how-to-obtain-virtio-drivers">KubeVirt user-guide: How to obtain virtio drivers?</a></li>
</ul>
:ET